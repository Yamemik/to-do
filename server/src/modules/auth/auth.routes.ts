import { FastifyInstance } from "fastify";
import fastifyOauth2 from "@fastify/oauth2";
import { UserRepoPrisma } from "../user/user.repository";
import { JWTService } from "./application/jwt.service";


export default async function authRoutes(app: FastifyInstance) {
  const repo = new UserRepoPrisma();
  const jwtService = new JWTService();

  // üîπ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Google OAuth
  app.register(fastifyOauth2, {
    name: "googleOAuth2",
    scope: ["profile", "email"],
    credentials: {
      client: {
        id: process.env.GOOGLE_CLIENT_ID!,
        secret: process.env.GOOGLE_CLIENT_SECRET!,
      },
      auth: fastifyOauth2.GOOGLE_CONFIGURATION,
    },
    startRedirectPath: "/auth/google",
    callbackUri: process.env.GOOGLE_CALLBACK_URL!, // üëà –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
  });

  // üîπ Callback –æ—Ç Google
  app.get("/auth/google/callback", async function (req, reply) {
    const tokenResponse = await app.googleOAuth2.getAccessTokenFromAuthorizationCodeFlow(req);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google
    const userInfoResponse = await fetch("https://www.googleapis.com/oauth2/v3/userinfo", {
      headers: { Authorization: `Bearer ${tokenResponse.token.access_token}` },
    });
    const profile = await userInfoResponse.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    let user = await repo.findByEmail(profile.email);
    if (!user) {
      user = await repo.create({
        name: profile.name,
        email: profile.email,
        password: "", // –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è OAuth
      });
    }

    // –°–æ–∑–¥–∞—ë–º JWT
    const token = jwtService.sign({ userId: user.id, email: user.email });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ—Ä–æ–Ω—Ç—É
    return reply.send({ token });
  });
}
